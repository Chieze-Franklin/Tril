using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Mono.Cecil;

using Tril.Attributes;
using Tril.Delegates;
using Tril.Models;

namespace Tril.Codoms
{
    /// <summary>
    /// Represents a logical NOT
    /// </summary>
    [Serializable]
    public sealed class Not : UnaryLogicOperation
    {
        /// <summary>
        /// Creates a new instance of Tril.Codoms.Not
        /// </summary>
        /// <param name="operand"></param>
        public Not(ValueStatement operand)
            : base(operand)
        { }

        /// <summary>
        /// Clones this statement
        /// </summary>
        /// <returns></returns>
        public override ValueStatement Clone()
        {
            Not clone = new Not(Operand);
            clone = (Not)ValueStatement.Clone(this, clone);
            return clone;
        }
        /// <summary>
        /// gets the C# representation of this code
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(null);
        }
        /// <summary>
        /// Returns the string representation of this code, as generated by the specified translator.
        /// </summary>
        /// <param name="translator"></param>
        /// <returns></returns>
        public override string ToString(CodomTranslator translator)
        {
            string trans = Codom.ToString(translator, this);
            if (trans != null)
                return trans;
            else
            {
                if (IsInline)
                    return (ShowOuterBrackets ? "(" : "") + "!" + Operand.ToString(translator) + (ShowOuterBrackets ? ")" : "");
                return "!" + Operand.ToString(translator) + ";";
            }
        }
    }
}
