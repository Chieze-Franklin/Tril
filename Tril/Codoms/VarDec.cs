using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Tril.Delegates;
using Tril.Models;

namespace Tril.Codoms
{
    /// <summary>
    /// Represents a statement that declares a variable.
    /// VarRef is not an inline code by default.
    /// </summary>
    [Serializable]
    public sealed class VarDec : Statement //shouldnt inherit from ReferenceStatement since a VarDec doesnt return/hold a value (might change in C# 6.0)
    {
        string _cachedName;
        string _cachedKind;
        Variable _refedVar;

        /// <summary>
        /// Creates a new instance of Tril.Codoms.VarDec.
        /// </summary>
        /// <param name="cachedName"></param>
        /// <param name="cachedKind"></param>
        /// <param name="refedVariable"></param>
        public VarDec(string cachedName, string cachedKind, Variable refedVariable)
        {
            if (cachedName == null || cachedName.Trim() == "")
                throw new NullReferenceException(this.GetType().FullName + ": Cached variable name cannot be null!");
            if (cachedKind == null || cachedKind.Trim() == "")
                throw new NullReferenceException(this.GetType().FullName + ": Cached variable kind cannot be null!");
            if (refedVariable == null)
                throw new NullReferenceException(this.GetType().FullName + ": Referenced variable cannot be null!");

            _cachedName = cachedName.Trim();
            _cachedKind = cachedKind.Trim();
            _refedVar = refedVariable;
            IsInline = false;
        }

        /// <summary>
        /// Gets the name cashed at the point of creating this instance.
        /// </summary>
        public string CachedName
        {
            get { return _cachedName; }
        }
        /// <summary>
        /// Gets the variable kind cashed at the point of creating this instance.
        /// </summary>
        public string CachedKind
        {
            get { return _cachedKind; }
        }
        /// <summary>
        /// Gets the referenced variable.
        /// </summary>
        public Variable ReferencedVariable
        {
            get { return _refedVar; }
        }

        /// <summary>
        /// gets the C# representation of this code
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(null);
        }
        /// <summary>
        /// Returns the string representation of this code, as generated by the specified translator.
        /// </summary>
        /// <param name="translator"></param>
        /// <returns></returns>
        public override string ToString(CodomTranslator translator)
        {
            string trans = Codom.ToString(translator, this);
            if (trans != null)
                return trans;
            else
            {
                if (IsInline)
                    return CachedKind + " " + CachedName;
                return CachedKind + " " + CachedName + ";";
            }
        }
    }
}
