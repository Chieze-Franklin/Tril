using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Mono.Cecil;

using Tril.Attributes;
using Tril.Delegates;
using Tril.Models;

namespace Tril.Codoms
{
    /// <summary>
    /// Represents an if block
    /// </summary>
    [Serializable]
    public sealed class If : SelectionBlock
    {
        ValueStatement _condition;
        Else _else;

        /// <summary>
        /// Creates a new instance of Tril.Codoms.If
        /// </summary>
        /// <param name="condition"></param>
        public If(ValueStatement condition)
        {
            if (condition == null)
                throw new NullReferenceException(this.GetType().FullName + ": The condition of an \"if\" cannot be null!");

            _condition = condition;
            _condition.IsInline = true;
            _condition.ShowOuterBrackets = false;

            this.Label = condition.Label;
        }

        /// <summary>
        /// Gets the condition of this If
        /// </summary>
        public ValueStatement Condition
        {
            get { return _condition; }
        }

        /// <summary>
        /// Gets or sets the else body of this if
        /// </summary>
        public Else Else
        {
            get { return _else; }
            set { _else = value; }
        }
        /// <summary>
        /// Gets a value to determine whether the if block has an else block
        /// </summary>
        public bool HasElse
        {
            get { return (Else != null); }
        }

        /// <summary>
        /// gets the C# representation of this code
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(null);
        }
        /// <summary>
        /// Returns the string representation of this code, as generated by the specified translator.
        /// </summary>
        /// <param name="translator"></param>
        /// <returns></returns>
        public override string ToString(CodomTranslator translator)
        {
            string trans = Codom.ToString(translator, this);
            if (trans != null)
                return trans;
            else
            {
                string codeString = "";
                codeString += "if (" + Condition.ToString(translator) + ")" +
                    ((Count == 1 && !(this[0] is Block)) ? "" : " {") + "\n"; //always put braces around blocks
                foreach (Codom ifBodyCode in this)
                {
                    codeString += ifBodyCode.ToString(translator) + "\n";
                }
                codeString += ((Count == 1 && !(this[0] is Block)) ? "" : "}"); //always put braces around blocks
                if (HasElse)
                {
                    codeString += "\nelse" +
                        ((Else.Count == 1 && !(this.Else[0] is Block)) ? "" : " {") + "\n"; //always put braces around blocks
                    foreach (Codom ifElseCode in Else)
                    {
                        codeString += ifElseCode.ToString(translator) + "\n";
                    }
                    codeString += ((Else.Count == 1 && !(this.Else[0] is Block)) ? "" : "}"); //always put braces around blocks
                }
                return codeString;
            }
        }
    }

    /// <summary>
    /// Represents an else block
    /// </summary>
    [Serializable]
    public sealed class Else : SelectionBlock
    {
        /// <summary>
        /// gets the C# representation of this code
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(null);
        }
        /// <summary>
        /// Returns the string representation of this code, as generated by the specified translator.
        /// </summary>
        /// <param name="translator"></param>
        /// <returns></returns>
        public override string ToString(CodomTranslator translator)
        {
            string trans = Codom.ToString(translator, this);
            if (trans != null)
                return trans;
            else
            {
                string codeString = "";
                codeString += "else" +
                    ((Count == 1 && !(this[0] is Block)) ? "" : " {") + "\n"; //always put braces around blocks
                foreach (Codom ifBodyCode in this)
                {
                    codeString += ifBodyCode.ToString(translator) + "\n";
                }
                codeString += ((Count == 1 && !(this[0] is Block)) ? "" : "}"); //always put braces around blocks
                return codeString;
            }
        }
    }
}
