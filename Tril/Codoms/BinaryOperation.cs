using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Tril.Delegates;
using Tril.Models;

namespace Tril.Codoms
{
    /// <summary>
    /// Represents an assignment operation.
    /// Note that assignment pops only one value sometimes when the target of the assignment is static.
    /// </summary>
    [Serializable]
    public sealed class Assignment : BinaryOperation
    {
        /// <summary>
        /// Creates a new instance of Tril.Codoms.Assignment
        /// </summary>
        /// <param name="target"></param>
        /// <param name="value"></param>
        public Assignment(ValueStatement target, ValueStatement value)
            : base(target, value)
        {
            //for instance fields or array elements or pointer elems, 
            //assignment adopts the label of its left operand (the target of the assignmnet)
            if (target is InstanceFieldRef || target is ArrayElement || target is PointerElement)
            {
                this.Label = target.Label;
            }
            else
                this.Label = value.Label;

            FirstOperand.ShowOuterBrackets = SecondOperand.ShowOuterBrackets = false;
        }

        /// <summary>
        /// Clones this statement
        /// </summary>
        /// <returns></returns>
        public override ValueStatement Clone()
        {
            Assignment clone = new Assignment(FirstOperand, SecondOperand);
            clone = (Assignment)ValueStatement.Clone(this, clone);
            return clone;
        }
        /// <summary>
        /// Gets the Kind of this code.
        /// </summary>
        /// <returns></returns>
        public override Kind GetKind()
        {
            return FirstOperand.GetKind();
        }
        /// <summary>
        /// gets the C# representation of this code
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(null);
        }
        /// <summary>
        /// Returns the string representation of this code, as generated by the specified translator.
        /// </summary>
        /// <param name="translator"></param>
        /// <returns></returns>
        public override string ToString(CodomTranslator translator)
        {
            string trans = Codom.ToString(translator, this);
            if (trans != null)
                return trans;
            else
            {
                if (IsInline)
                    return (ShowOuterBrackets ? "(" : "") + FirstOperand.ToString(translator) + " = " + SecondOperand.ToString(translator) + (ShowOuterBrackets ? ")" : "");
                return FirstOperand.ToString(translator) + " = " + SecondOperand.ToString(translator) + ";";
            }
        }
    }

    /// <summary>
    /// Represents an indirect assignment operation.
    /// </summary>
    [Serializable]
    public sealed class IndirectAssignment : BinaryOperation
    {
        /// <summary>
        /// Creates a new instance of Tril.Codoms.IndirectAssignment
        /// </summary>
        /// <param name="address"></param>
        /// <param name="value"></param>
        public IndirectAssignment(ValueStatement address, ValueStatement value)
            : base(address, value)
        {
            //for instance fields, assignment adopts the label of its left operand (the target of the assignmnet)
            if (address is InstanceFieldRef)
            {
                this.Label = address.Label;
            }
            else
                this.Label = value.Label;

            FirstOperand.ShowOuterBrackets = SecondOperand.ShowOuterBrackets = false;
        }

        /// <summary>
        /// Clones this statement
        /// </summary>
        /// <returns></returns>
        public override ValueStatement Clone()
        {
            IndirectAssignment clone = new IndirectAssignment(FirstOperand, SecondOperand);
            clone = (IndirectAssignment)ValueStatement.Clone(this, clone);
            return clone;
        }
        /// <summary>
        /// Gets the Kind of this code.
        /// </summary>
        /// <returns></returns>
        public override Kind GetKind()
        {
            return FirstOperand.GetKind();
        }
        /// <summary>
        /// gets the representation of this code
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(null);
        }
        /// <summary>
        /// Returns the string representation of this code, as generated by the specified translator.
        /// </summary>
        /// <param name="translator"></param>
        /// <returns></returns>
        public override string ToString(CodomTranslator translator)
        {
            string trans = Codom.ToString(translator, this);
            if (trans != null)
                return trans;
            else
            {
                if (IsInline)
                    return (ShowOuterBrackets ? "(" : "") + "*" + FirstOperand.ToString(translator) + " = " + SecondOperand.ToString(translator) + (ShowOuterBrackets ? ")" : "");
                return "*" + FirstOperand.ToString(translator) + " = " + SecondOperand.ToString(translator) + ";";
            }
        }
    }
}
